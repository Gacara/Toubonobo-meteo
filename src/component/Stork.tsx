/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from 'react'
import { useFrame, useLoader } from '@react-three/fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import * as THREE from 'three'
import { birdInterface } from '../interfaces/utils';

type GLTFResult = GLTF & {
  nodes: {
    Object_0: THREE.Mesh
  }
  materials: {
    Material_0_COLOR_0: THREE.MeshStandardMaterial
  }
}

type ActionName = 'KeyAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Stork({props, callback, birdSpeed}: birdInterface) {
  const group: React.MutableRefObject<any> = useRef<THREE.Group>(null)
  const gltf = useLoader(GLTFLoader, "/birds/Stork.glb");
  const { nodes, materials, animations } = gltf as GLTFResult
  const factor = 3.5 + birdSpeed/15;
  const speed = 1.25 + birdSpeed/50;
  const actions = useRef<GLTFActions>();
  const [yRatio, setYRatio] = useState<boolean>(false);
  const [pointer, setPointer] = useState<boolean>(false);

  const [mixer] = useState(() => new THREE.AnimationMixer(null as any))
  useFrame((state, delta) => {
    const x = Math.sin((delta * factor) / 2) * Math.cos((delta * factor) / 2) * 1.5;
    if (group.current.position.x <= -10) {group.current.position.x = 17};
    group.current.position.x -= x;
    if(yRatio){
      group.current.position.y -= x;
      group.current.rotation.y += x;
    }
    if (group.current.position.y <= 0){
      group.current.position.x = 19; 
      group.current.position.y = 7;
      group.current.position.z = -8;
      group.current.rotation.y = 0.5;
      setYRatio(false);
    };
    mixer.update(delta * speed);
  })

  useEffect(() => {
    actions.current = {
      KeyAction: mixer.clipAction(animations[0], group.current).play(),
    }
    if(yRatio){
      actions.current = {
        KeyAction: mixer.clipAction(animations[0], group.current).stop(),
      }
      group.current.rotation.z = 1.5;
    } else {
      group.current.rotation.z = -0.4;
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  }, [animations, mixer, yRatio])

  useEffect(()=>{
    const element = document.querySelector("canvas");
    if(element){
      if(pointer)element.style.cursor = "crosshair";
      if(!pointer)element.style.cursor = "auto";
    }
  }, [pointer])

  return (
    <group onClick={() => {setYRatio(true); callback();}} onPointerEnter={() => setPointer(true)} onPointerLeave={() => setPointer(false)} ref={group} position={[19, 7, -8]} {...props}>
      <mesh
        material={materials.Material_0_COLOR_0}
        geometry={nodes.Object_0.geometry}
        name="Object_0"
        morphTargetDictionary={nodes.Object_0.morphTargetDictionary}
        morphTargetInfluences={nodes.Object_0.morphTargetInfluences}
        rotation={[1.5707964611537577, 0.5, 1.5]}
      />
    </group>
  )
}


