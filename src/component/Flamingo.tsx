/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from 'react'
import * as THREE from 'three'
import { useFrame, useLoader } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    Object_0: THREE.Mesh
  }
  materials: {
    Material_0_COLOR_0: THREE.MeshStandardMaterial
  }
}

type ActionName = 'KeyAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Flamingo(props: JSX.IntrinsicElements['group']) {
  const group: React.MutableRefObject<any> = useRef<THREE.Group>()
  const gltf = useLoader(GLTFLoader, "/birds/Flamingo.glb");
  const { nodes, materials, animations } = gltf as GLTFResult
  const factor = 3;
  const speed = 3;
  const actions = useRef<GLTFActions>()
  const [mixer] = useState(() => new THREE.AnimationMixer(null as any))
  useFrame((state, delta) => {
    const x = Math.sin((delta * factor) / 2) * Math.cos((delta * factor) / 2) * 1.5;
    if (group.current.position.x <= -10) {group.current.position.x = 17};
    group.current.position.x -= x;
    mixer.update(delta * speed);
  })
  useEffect(() => {
    actions.current = {
      KeyAction: mixer.clipAction(animations[0], group.current).play(),
    }
    return () => animations.forEach((clip) => mixer.uncacheClip(clip))
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])
  return (
    <group ref={group} position={[17, 4, -13]} {...props}>
      <mesh
        material={materials.Material_0_COLOR_0}
        geometry={nodes.Object_0.geometry}
        name="Object_0"
        morphTargetDictionary={nodes.Object_0.morphTargetDictionary}
        morphTargetInfluences={nodes.Object_0.morphTargetInfluences}
        rotation={[1.5707964611537577, 0, 2]}
      />
    </group>
  )
}


